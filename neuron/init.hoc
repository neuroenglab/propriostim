/* File description ***********************************************************/
/*
2/02
Cameron C. McIntyre

SIMULATION OF PNS MYELINATED AXON

This model is described in detail in:

McIntyre CC, Richardson AG, and Grill WM. Modeling the excitability of
mammalian nerve fibers: influence of afterpotentials on the recovery
cycle. Journal of Neurophysiology 87:995-1006, 2002.

This model can not be used with NEURON v5.1 as errors in the
extracellular mechanism of v5.1 exist related to xc. The original
stimulations were run on v4.3.1. NEURON v5.2 has corrected the 
limitations in v5.1 and can be used to run this model.

Modified by StÃ©phanie Amati, EPFL, December 2014
*/

/* Libraries and files ********************************************************/
// Libraries
a = load_file("noload.hoc") 	// Load standard run system and other useful hoc 
				   				// libraries. (NOT needed to just get activation)

/* Parameters and variables ****************************************/

// Objects
// stimulation potential
objectvar V
// AP counter for middle node
objref apcMiddle
// AP counter for end node
objref apcEnd


// total number of compartments (segments) per section,
// i.e. node and myelin compartments
nComparts = 11

/* Procedures and functions ***************************************************/

// Procedure to load data from files (stimulation parameters, fiber diameter and
// structure and external stmulation potential
proc set_model_params(){ local i, nV, nNonV
    // Fiber parameters and voltages
    // Read in a file with following format:
	
	// 'D'
	// 'start'
	// 'duration'
	// 'nbCurr'
	// 'nbNod'
	// 'nComparts'
	// 'nodeD'
	// 'paraD1'
	// 'paraD2', 
	// 'interD'
	// 'nnL' ---> unused, may be removed
	// 'nodeL'
	// 'paraL1'
	// 'paraL2'
	// 'interL'
	// 'nbLam'
	// remaining values: vector with extracellular voltages
	
	// fiber diameter
	D = $1
	// current injection start time
	start = $2
	// duration of current injection
	duration = $3
	// total number of nodes of Ranvier	
	nbNod =$4
	// diameter of nodes of Ranvier
	nodeD = $5
	// diameter of paranode 1 (MYSA)
	paraD1 = $6
	// diameter of paranode 2 (FLUT)
	paraD2 = $7
	// diameter of internode (STIN)
	interD = $8
	// internodal distance, i.e. from the beginning of
	// one node to the beginning of the next node
	nnL = $9
	// node length
	nodeL = $10
	// length of paranode 1 (MYSA)
	paraL1 = $11
	// length of paranode 2 (FLUT)
	paraL2 = $12
	// total length of internodal segments
	interL = $13
	// number of lamella
	nbLam = $14
	
	nV = nComparts * (nbNod - 1) + 1
	nNonV = numarg() - nV
	
	// Stimulation potential
	V = new Vector(nV) 
    for i = nNonV + 1, numarg() {
		V.x[i - nNonV - 1] = $i
	}
}

func ceil() { local numInt
	numInt = int($1)
	if ($1 > numInt) {
		return numInt + 1
	} else {
		return $1
	}
}

/* Main ***********************************************************************/

// Launch simulations until fiber is activated
func FindThreshold(){ local precision, threshold, lowerBound, upperBound, activation
	// begin with a multiplier estimated such that the 
	// extracellular potential is scaled to 100mV
	mod_factor = 75 / V.max()
	// if the potentials are zero or lower ...
	if (mod_factor <= 0) {
		// ... the fiber is not activated
		return 0
	} else {
		// precision of the return value
		// i.e. the return value will be rounded up to the closest multiple of this value
		precision = $1
		// cap for threshold values
		upperBound = $2
		// if the multiplier start value is above the upper bound ...
		if (mod_factor > (upperBound + precision)) {
			// ... scale the multiplier down to just above the upper bound
			// (to avoid unecessary simulations)
			mod_factor = upperBound + precision
		}
		// activation threshold: start with arbitrary high number
		threshold = upperBound * 10
		// lower bound for multiplier, i.e. highest value of fiber inactivity
		lowerBound = 0
		// set fiber as inactive
		activation = 0
		while (threshold == upperBound * 10 || lowerBound == 0) {
			activation = ExecuteSimulation(mod_factor)
			if (activation) {
				threshold = mod_factor
				// decrease multiplier by half
				mod_factor = mod_factor / 2
			} else {
				// zero as threshold if the fiber is inactive above the upper bound
				if (mod_factor > upperBound) { return 0 }
				lowerBound = mod_factor
				// increase mutliplier by half
				mod_factor = mod_factor * 1.5
			}
		}
	
		while (ceil(threshold / precision) - int(lowerBound / precision) > 1) {
			// set multiplier to 
			mod_factor = (lowerBound + threshold) / 2
			activation = ExecuteSimulation(mod_factor)
			if (activation) {
				threshold = mod_factor
			} else {
				// zero as threshold if the fiber is inactive above the upper bound
				if (mod_factor > upperBound) { return 0 }
				lowerBound = mod_factor
			}
		}
		// round the threshold up to according to the precision
		threshold = ceil(threshold / precision) * precision
		if (threshold > upperBound) {
			return 0
		} else {
			return threshold
		}
	}
}