/* File description ***********************************************************/
/*
2/02
Cameron C. McIntyre

SIMULATION OF PNS MYELINATED AXON

This model is described in detail in:

McIntyre CC, Richardson AG, and Grill WM. Modeling the excitability of
mammalian nerve fibers: influence of afterpotentials on the recovery
cycle. Journal of Neurophysiology 87:995-1006, 2002.

This model can not be used with NEURON v5.1 as errors in the
extracellular mechanism of v5.1 exist related to xc. The original
stimulations were run on v4.3.1. NEURON v5.2 has corrected the 
limitations in v5.1 and can be used to run this model.

Modified by StÃ©phanie Amati, EPFL, December 2014
*/

/* Libraries and files ********************************************************/
// Libraries
a = load_file("noload.hoc") 	// Load standard run system and other useful hoc 
				   				// libraries. (NOT needed to just get activation)

/* Parameters and variables ****************************************/

// Files to read
// fiber and simulation parameters, extracellular potentials
objectvar file_par_Vext
file_par_Vext=new File()

// Objects
// stimulation potential
objectvar V
// AP counter for middle node
objref apcMiddle
// AP counter for end node
objref apcEnd

/* Procedures and functions ***************************************************/

// Procedure to load data from files (stimulation parameters, fiber diameter and
// structure and external stmulation potential
proc load_files(){
    // Fiber parameters and voltages
    // Read in a file with following format:
	
	// 'D'
	// 'start'
	// 'duration'
	// 'deltai'
	// 'nbCurr'
	// 'nbNod'
	// 'nComparts'
	// 'nodeD'
	// 'paraD1'
	// 'paraD2', 
	// 'interD'
	// 'nnL' ---> unused, may be removed
	// 'nodeL'
	// 'paraL1'
	// 'paraL2'
	// 'interL'
	// 'nbLam'
	// 'bisect'
	// remaining values: vector with extracellular voltages
	
	file_par_Vext.ropen("parameters_vext.dat")
	
	// fiber diameter
	D = file_par_Vext.scanvar()
	// current injection start time
	start = file_par_Vext.scanvar()
	// duration of current injection
	duration = file_par_Vext.scanvar()
	// Current incrementation step size
	deltaI = file_par_Vext.scanvar()
	// maximum number of current incrementations
	nbCurr = file_par_Vext.scanvar()
	// total number of nodes of Ranvier	
	nbNod = file_par_Vext.scanvar()
	// total number of compartments (segments) per section,
	// i.e. node and myelin compartments
	nComparts = file_par_Vext.scanvar()
	// diameter of nodes of Ranvier
	nodeD = file_par_Vext.scanvar()
	// diameter of paranode 1 (MYSA)
	paraD1 = file_par_Vext.scanvar()
	// diameter of paranode 2 (FLUT)
	paraD2 = file_par_Vext.scanvar()
	// diameter of internode (STIN)
	interD = file_par_Vext.scanvar()
	// internodal distance, i.e. from the beginning of
	// one node to the beginning of the next node
	nnL = file_par_Vext.scanvar()
	// node length
	nodeL = file_par_Vext.scanvar()
	// length of paranode 1 (MYSA)
	paraL1 = file_par_Vext.scanvar()
	// length of paranode 2 (FLUT)
	paraL2 = file_par_Vext.scanvar()
	// total length of internodal segments
	interL = file_par_Vext.scanvar()
	// number of lamella
	nbLam = file_par_Vext.scanvar()
	// whether or not to apply the bisection algorithm
	bisect = file_par_Vext.scanvar()
	
	// Stimulation potential
	V = new Vector(nComparts*(nbNod-1)+1) 
    for i=0, nComparts*(nbNod-1) {
		V.x[i] = file_par_Vext.scanvar()
	}
	file_par_Vext.close()
}

// Load data from files (data)
load_files()

// Procedure to set constant parameters of the MRG model
proc model_globels() {
	// Human body temperature
	celsius = 37 // [degrees C]
	// Initial Resting Membrane Potential (RMP)
	v_init = -80 // [mV]
	// Topological parameters
	// number of MYSA compartments per section
	paranodes1 = (nbNod-1)*2
	// number of FLUT compartments per section
	paranodes2 = (nbNod-1)*2
	// number of STIN compartments per section
	axoninter = (nbNod-1)*6
	
	// Morphological parameters
	// Space between MYSA and external layer (periaxonal)
	space_p1 = 0.002 // [um]
	// Space between FLUT and external layer (periaxonal)
	space_p2 = 0.004 // [um]
	// Space between STIN and external layer (periaxonal)
	space_i = 0.004 // [um]

	// Electrical parameters	
	// Axoplasmic resistivity
	rhoa = 0.7e6 // [ohm*um]
	// Myelin capacitance per lamella membrane (2 membranes per lamella)
	mycm = 0.1 // [uF/cm^2]
	// Myelin conductance per lamella membrane (2 membranes per lamella)
	mygm = 0.001 // [S/cm^2]
}

model_globels()

// Procedure to compute parameters of the MRG that are dependant of the fiber
// diameter, i.e. axonal resistivities at different levels, per section surface
proc dependent_var() {
	// Fiber 
	// unit [Mohm/cm]
	// 0.01 is to transform in Mohms/cm (1e-6*1e4 = 1e-2)
	// axonal resistivities at different levels, per section surface
	// unit [Mohm/cm] (using factor 0.01 = 1e-2 = 1e-6*1e4 for conversion from [ohms/um])
	// Little space above node layer
	Rpn0 = (rhoa*.01)/(PI*((((nodeD/2)+space_p1)^2)-((nodeD/2)^2)))
	// Little space above MYSA layer
	Rpn1 = (rhoa*.01)/(PI*((((paraD1/2)+space_p1)^2)-((paraD1/2)^2)))
	// Little space above FLUT layer
	Rpn2 = (rhoa*.01)/(PI*((((paraD2/2)+space_p2)^2)-((paraD2/2)^2)))
	// Little space above STIN layer
	Rpx = (rhoa*.01)/(PI*((((interD/2)+space_i)^2)-((interD/2)^2)))
}

dependent_var()

// Create sections composing a fiber basic structure (we have to do it here
// because we don't know the size before ;)
create node[nbNod]
create MYSA[paranodes1]
create FLUT[paranodes2]
create STIN[axoninter]

// Procedure to create fiber model and initialize its parameters and mechanism
// Just for info, default values of extracellular: vext[0] = vext[1] = 0 mV, 
// i_membrane = 0 mA/cm^2, xraxial[1] = 1e9 Mohms/cm, xg[1] = 1e9 S/cm^2
proc initialize(){
	// Node sections
	for i=0, nbNod-1 {
		node[i]{
			nseg = 1
			diam = nodeD
			L = nodeL
			// cytoplasmic resistivity
			Ra = rhoa/10000 // [ohm*cm] (converted from ohm*um)
			// specific membrane capacitance
			cm = 2 // [uF/cm^2]
			// modified HH equations
			insert axnode

			// extracellular layer, i.e. small layer of 
			// axoplasm and myelin sheath
			insert extracellular {
				// axial resistance
				xraxial = Rpn0
				// conductivity
				xg = 1e10 // [S/cm^2]
				// capacitance
				xc = 0 // [uF/cm^2]
			}
		}
	}

	// MYSA sections
	for i=0, paranodes1-1 {
		MYSA[i]{
			nseg = 1
			diam = D
			L = paraL1
			// cytoplasmic resistivity, corrected for diameter
			Ra = rhoa*(1/(paraD1/D)^2)/10000 // [ohm*cm] (converted from ohm*um)
			// specific membrane capacitance, corrected for diameter
			cm = 2*paraD1/D // [uf/cm^2]
			// passive membrane channel
			insert pas {
				// conductance, corrected for geometry
				g_pas = 0.001*paraD1/D // [mho/cm^2]
				// reversal potential
				e_pas = v_init // [mV]
			}
			
			// extracellular layer, i.e. small layer of 
			// axoplasm and myelin sheath
			insert extracellular {
				// axial resistance
				xraxial = Rpn1
				// conductivity, corrected for number of lamella membranes
				xg = mygm/(nbLam*2)
				// capacitance, corrected for number of lamella membranes
				xc = mycm/(nbLam*2)
			}
		}
	}

	// FLUT sections
	for i=0, paranodes2-1 {
		FLUT[i]{
			nseg = 1
			diam = D
			L = paraL2
			// cytoplasmic resistivity, corrected for diameter
			Ra = rhoa*(1/(paraD2/D)^2)/10000 // [ohm*cm] (converted from ohm*um)
			// specific membrane capacitance, corrected for diameter
			cm = 2*paraD2/D // [uf/cm^2]
			// passive membrane channel
			insert pas {
				// conductance, corrected for geometry
				g_pas = 0.0001*paraD2/D // [mho/cm^2]
				// reversal potential
				e_pas = v_init // [mV]
			}
			
			// extracellular layer, i.e. small layer of 
			// axoplasm and myelin sheath
			insert extracellular{
				// axial resistance
				xraxial = Rpn2
				// conductivity, corrected for number of lamella membranes
				xg = mygm/(nbLam*2)
				// capacitance, corrected for number of lamella membranes
				xc = mycm/(nbLam*2)
			}
		}
	}

	// STIN sections
	for i=0, axoninter-1 {
		STIN[i]{
			nseg = 1
			diam = D
			L = interL
			// cytoplasmic resistivity, corrected for diameter
			Ra = rhoa*(1/(interD/D)^2)/10000 // ohm*cm (converted from ohm*um)
			// specific membrane capacitance, corrected for diameter
			cm = 2*interD/D
			// passive membrane channel
			insert pas {
				// conductance, corrected for geometry
				g_pas = 0.0001*interD/D // [mho/cm^2]
				// reversal potential
				e_pas = v_init // [mV]
			}
			
			// extracellular layer, i.e. small layer of 
			// axoplasm and myelin sheath
			insert extracellular{
				// axial resistance
				xraxial = Rpx
				// conductivity, corrected for number of lamella membranes
				xg = mygm/(nbLam*2)
				// capacitance, corrected for number of lamella membranes
				xc = mycm/(nbLam*2)
			}
		}
	}

	// Connect all sections to form fiber
	for i=0, nbNod-2 {
		connect MYSA[2*i](0), node[i](1)
		connect FLUT[2*i](0), MYSA[2*i](1)

		connect STIN[6*i](0), FLUT[2*i](1)
		connect STIN[6*i+1](0), STIN[6*i](1)
		connect STIN[6*i+2](0), STIN[6*i+1](1)
		connect STIN[6*i+3](0), STIN[6*i+2](1)
		connect STIN[6*i+4](0), STIN[6*i+3](1)	
		connect STIN[6*i+5](0), STIN[6*i+4](1)	

		connect FLUT[2*i+1](0), STIN[6*i+5](1)
		connect MYSA[2*i+1](0), FLUT[2*i+1](1)
		connect node[i+1](0), MYSA[2*i+1](1)
	}
}

// Create fiber
initialize()

// initialization handler
objref fih
// Set handler
fih = new FInitializeHandler("initi()")

// Procedure to initialize simulation when t = START (go to start_stim() procedure)
proc initi() {
	I_extracellular_0()
	cvode.event(start, "start_stim()")
	cvode.event(start + duration, "stop_stim()")
}

// Procedure to set simulation parameters in function of simulation state given
// by STIMON (0 = previously not stimulated, 1 = previously stimulated)
proc start_stim() {
	I_extracellular()
	cvode.re_init()
	dt = 0.001
}

proc stop_stim() {
	I_extracellular_0()
	fcurrent()
	dt = 0.001
}

// Procedure to stimulate axon extracellularly
proc I_extracellular(){
	
	// Set stimulation potential to all sections of the fiber
    for i=0, nbNod-2{
		// start position of the current section in terms of compartments
		sectStart = i * nComparts
		node[i].e_extracellular = -V.x[sectStart]*mod_factor
		MYSA[2*i].e_extracellular = -V.x[sectStart+1]*mod_factor
		FLUT[2*i].e_extracellular = -V.x[sectStart+2]*mod_factor
		STIN[6*i].e_extracellular = -V.x[sectStart+3]*mod_factor
		STIN[6*i+1].e_extracellular = -V.x[sectStart+4]*mod_factor
		STIN[6*i+2].e_extracellular = -V.x[sectStart+5]*mod_factor
		STIN[6*i+3].e_extracellular = -V.x[sectStart+6]*mod_factor
		STIN[6*i+4].e_extracellular = -V.x[sectStart+7]*mod_factor
		STIN[6*i+5].e_extracellular = -V.x[sectStart+8]*mod_factor
		FLUT[2*i+1].e_extracellular = -V.x[sectStart+9]*mod_factor
		MYSA[2*i+1].e_extracellular = -V.x[sectStart+10]*mod_factor
	}
    
    // Set last node
    node[nbNod-1].e_extracellular=-V.x[V.size()-1]*mod_factor

}

// Procedure to stop stimulating axon extracellularly (I = 0)
proc I_extracellular_0() {
	// Set stimulation to zero for all sections of the fiber
	for i=0, nbNod-2 {
		node[i].e_extracellular=0
     	MYSA[2*i].e_extracellular=0
      	FLUT[2*i].e_extracellular=0
		STIN[6*i].e_extracellular=0
		STIN[6*i+1].e_extracellular=0
		STIN[6*i+2].e_extracellular=0
		STIN[6*i+3].e_extracellular=0
		STIN[6*i+4].e_extracellular=0
        STIN[6*i+5].e_extracellular=0 
        FLUT[2*i+1].e_extracellular=0
        MYSA[2*i+1].e_extracellular=0
	}
    // Set last node
    node[nbNod-1].e_extracellular=0
}


// Function that launches simulation for one mod_factor given as input
func ExecuteSimulation(){ local id

	// Set simulation parameters
	// amplitude modulator as input parameter 1
	mod_factor = $1
	// Set stopping time to 1.4ms
	tstop = 1.4
	// Set integration time interval to 0.001ms
	dt = 0.001

	// Put AP counter on center of nodes in middle and end of fiber with 
	// threshold 0mv (on v, not on extracellular layers)
	// middle node
	node[int(nbNod / 2 + .5) - 1] {
		apcMiddle = new APCount(0.5)
		apcMiddle.thresh = 0
	}
	// end node
	node[nbNod - 1]{
		apcEnd = new APCount(0.5)
		apcEnd.thresh = 0
	}
	access node[nbNod - 1] // TODO: try without this

	// Performs initialization in several steps:
	// - sets t = 0
	// - initialize all sections membrane potential with v_init (node/paranode)
	// - calls FInitializeHandlers: here we have only fih which points on the 
	//   procedure initi() 
	// - executes all INITIAL blocks of the sections mechanisms	(.mod)
	finitialize(v_init)
	
	// Start simulation (t starts to go)
	// When t = start, initi() is called for the first time and since calls are
	// launched within the function, the simulation will follow its instructions
	// until t = tstop ;)
	run()

	// If threshold crossed (AP generated) on both nodes (middle and end), return 
	// mod_factor+1 (because apcMiddle.n gives number of times crossed threshold)
	// return mod_factor+0 otherwise
	if (apcMiddle.n>0 && apcEnd.n>0){
		return 1
	} else{
		return 0
	}
}

/* Main ***********************************************************************/
// Launch simulations until fiber is activated

if (bisect) {
	// BISECTION
	minActive = nbCurr+1  // min value tested positive
	maxInactive = 0  // max value tested negative
	while (minActive - maxInactive > 1) {
		i_stim = int((minActive + maxInactive) / 2)
		mod_factor = i_stim*deltaI
		// print mod_factor
		activation = ExecuteSimulation(mod_factor)
		if(activation) {
			minActive = i_stim
		} else {
			maxInactive = i_stim
		}
	}
} else {
	i_stim = 1
	minActive = 0
	activation = 0
	while (!activation && i_stim <= nbCurr) {
		mod_factor = i_stim*deltaI
		// print mod_factor
		activation = ExecuteSimulation(mod_factor)
		if (activation) {
			minActive = i_stim
		}
		i_stim+=1
	}
}

print "threshold current step: ", minActive % (nbCurr + 1)