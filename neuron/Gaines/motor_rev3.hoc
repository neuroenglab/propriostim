/*--------------------------------------------------------------------

06/16
Jessica Gaines and Katharine Polasek

04/15
Lane Heyboer
Julia Slopsema

2/02
Cameron C. McIntyre

SIMULATION OF PNS MYELINATED MOTOR AXON

This model is described in detail in:

Gaines JS, Finn KE, Slopsema JP, Heyboer LA, Polasek KH. A Model of 
Motor and Sensory Axon Activation in the Median Nerve Using Surface Electrical Stimulation. Journal of Computational Neuroscience, 2018.

McIntyre CC, Richardson AG, and Grill WM. Modeling the excitability of
mammalian nerve fibers: influence of afterpotentials on the recovery
cycle. Journal of Neurophysiology 87:995-1006, 2002.


----------------------------------------------------------------------*/

/* Libraries and files ********************************************************/
// Libraries
a = load_file("noload.hoc") 	// Load standard run system and other useful hoc 
				   				// libraries. (NOT needed to just get activation)

/* Parameters and variables ****************************************/

// Files to read
// fiber and simulation parameters, extracellular potentials
objectvar file_par_Vext
file_par_Vext=new File()

// Objects
// stimulation potential
objectvar V
// AP counter for middle node
objref apcMiddle
// AP counter for end node
objref apcEnd

/* Procedures and functions ***************************************************/

// Procedure to load data from files (stimulation parameters, fiber diameter and
// structure and external stmulation potential
proc load_files(){
    // Fiber parameters and voltages
    // Read in a file with following format:
	
	// 'D'
	// 'start'
	// 'duration'
	// 'deltai'
	// 'nbCurr'
	// 'nbNod'
	// 'nComparts'
	// 'nodeD'
	// 'paraD1'
	// 'paraD2', 
	// 'interD'
	// 'nnL' ---> unused, may be removed
	// 'nodeL'
	// 'paraL1'
	// 'paraL2'
	// 'interL'
	// 'nbLam'
	// 'bisect'
	// remaining values: vector with extracellular voltages
	
	file_par_Vext.ropen("parameters_vext.dat")
	
	// fiber diameter
	D = file_par_Vext.scanvar()
	// current injection start time
	start = file_par_Vext.scanvar()
	// duration of current injection
	duration = file_par_Vext.scanvar()
	// Current incrementation step size
	deltaI = file_par_Vext.scanvar()
	// maximum number of current incrementations
	nbCurr = file_par_Vext.scanvar()
	// total number of nodes of Ranvier	
	nbNod = file_par_Vext.scanvar()
	// total number of compartments (segments) per section,
	// i.e. node and myelin compartments
	nComparts = file_par_Vext.scanvar()
	// diameter of nodes of Ranvier
	nodeD = file_par_Vext.scanvar()
	// diameter of paranode 1 (MYSA)
	paraD1 = file_par_Vext.scanvar()
	// diameter of paranode 2 (FLUT)
	paraD2 = file_par_Vext.scanvar()
	// diameter of internode (STIN)
	interD = file_par_Vext.scanvar()
	// internodal distance, i.e. from the beginning of
	// one node to the beginning of the next node
	nnL = file_par_Vext.scanvar()
	// node length
	nodeL = file_par_Vext.scanvar()
	// length of paranode 1 (MYSA)
	paraL1 = file_par_Vext.scanvar()
	// length of paranode 2 (FLUT)
	paraL2 = file_par_Vext.scanvar()
	// total length of internodal segments
	interL = file_par_Vext.scanvar()
	// number of lamella
	nbLam = file_par_Vext.scanvar()
	
	// Stimulation potential
	V = new Vector(nComparts*(nbNod-1)+1) 
    for i=0, nComparts*(nbNod-1) {
		V.x[i] = file_par_Vext.scanvar()
	}
	file_par_Vext.close()
}

// Load data from files (data)
load_files()

// Procedure to set constant parameters of the MRG model
proc model_globals() {
	// Human body temperature
	celsius = 37 // [degrees C]
	// Initial Resting Membrane Potential (RMP) of motor axons
	// according to Howell's et al. (2012)
	v_init = -84.4 // [mV]
	// according to Gaines et al. (2018) -- deprecated
	// v_init=-85.9411 //mV//

	// Topological parameters
	// number of MYSA compartments per section
	paranodes1 = (nbNod-1)*2
	// number of FLUT compartments per section
	paranodes2 = (nbNod-1)*2
	// number of STIN compartments per section
	axoninter = (nbNod-1)*6
	
	// Morphological parameters
	// Space between MYSA and external layer (periaxonal)
	space_p1 = 0.002 // [um]
	// Space between FLUT and external layer (periaxonal)
	space_p2 = 0.004 // [um]
	// Space between STIN and external layer (periaxonal)
	space_i = 0.004 // [um]

	// Electrical parameters	
	// Axoplasmic resistivity
	rhoa = 0.7e6 // [ohm*um]
	// Myelin capacitance per lamella membrane (2 membranes per lamella)
	mycm = 0.1 // [uF/cm^2]
	// Myelin conductance per lamella membrane (2 membranes per lamella)
	mygm = 0.001 // [S/cm^2]
}

model_globals()

// Procedure to compute parameters of the MRG that are dependant of the fiber
// diameter, i.e. axonal resistivities at different levels, per section surface
proc dependent_var() {
	// deprecated:
	// linear interpolation of properties from McIntyre, Richardson, and Grill (2002) for any fiber diameter between 5.7 and 16 um
	// axonD = 0.889*(D)-1.9104  		//diameter of the axon
	// nodeD = 0.3449*(D)-0.1484 		//diameter of the node
	// paraD1 = 0.3527*(D)-0.1804		//diameter of paranode 1
	// paraD2 = 0.889*(D)-1.9104 		//diameter of paranode 2
	// nnL = 969.3*log(D)-1144.6		//total length between nodes (including 1/2 the node on each side)
	// paraL2 = 2.5811*(D)+19.59 	//length of paranode2
	// nl = 65.897*log(D)-32.666		//number of lamella
	// interL=(nnL-nodeL-(2*paraL1)-(2*paraL2))/6

	// axonal resistivities at different levels, per section surface
	// unit [Mohm/cm] (using factor 0.01 = 1e-2 = 1e-6*1e4 for conversion from [ohms/um])
	// Little space above node layer
	Rpn0 = (rhoa*.01)/(PI*((((nodeD/2)+space_p1)^2)-((nodeD/2)^2)))
	// Little space above MYSA layer
	Rpn1 = (rhoa*.01)/(PI*((((paraD1/2)+space_p1)^2)-((paraD1/2)^2)))
	// Little space above FLUT layer
	Rpn2 = (rhoa*.01)/(PI*((((paraD2/2)+space_p2)^2)-((paraD2/2)^2)))
	// Little space above STIN layer
	Rpx = (rhoa*.01)/(PI*((((interD/2)+space_i)^2)-((interD/2)^2)))
}

dependent_var()

// Create sections composing a fiber basic structure (we have to do it here
// because we don't know the size before ;)
create node[nbNod], MYSA[paranodes1], FLUT[paranodes2], STIN[axoninter]
access node[0]	//APD // TODO: Why? try without this (https://www.neuron.yale.edu/neuron/static/new_doc/modelspec/programmatic/topology/secspec.html#index-0)

// Procedure to create fiber model and initialize its parameters and mechanism
// Just for info, default values of extracellular: vext[0] = vext[1] = 0 mV, 
// i_membrane = 0 mA/cm^2, xraxial[1] = 1e9 Mohms/cm, xg[1] = 1e9 S/cm^2
proc modelsetup(){

	// initialize extracellular voltage source
	forall insert extracellular
	// set extracellular voltage source to ground
	forall e_extracellular = 0

	// Node sections
	for i=0, nbNod-1 {
		node[i]{
			nseg = 1
			diam = nodeD
			L = nodeL
			// cytoplasmic resistivity
			Ra = rhoa/10000 // [ohm*cm] (converted from ohm*um)
			// specific membrane capacitance
			cm = 2 // [uF/cm^2]
			// mod file declaring nodal channel properties
			insert node_motor

			// extracellular layer, i.e. small layer of 
			// axoplasm and myelin sheath
			// axial resistance
			xraxial = Rpn0
			// conductivity
			xg = 1e10 // [S/cm^2]
			// capacitance
			xc = 0 // [uF/cm^2]
		}
	}

	// MYSA sections
	for i=0, paranodes1-1 {
		MYSA[i]{
			nseg = 1
			diam = D
			L = paraL1
			// cytoplasmic resistivity, corrected for diameter
			Ra = rhoa*(1/(paraD1/D)^2)/10000 // [ohm*cm] (converted from ohm*um)
			// specific membrane capacitance, corrected for diameter
			cm = 2*paraD1/D // [uf/cm^2]
			// mod file declaring mysa channel properties
			insert mysa_motor
			
			// extracellular layer, i.e. small layer of 
			// axoplasm and myelin sheath
			// axial resistance
			xraxial = Rpn1
			// conductivity, corrected for number of lamella membranes
			xg = mygm/(nbLam*2)
			// capacitance, corrected for number of lamella membranes
			xc = mycm/(nbLam*2)
		}
	}

	// FLUT sections
	for i=0, paranodes2-1 {
		FLUT[i]{
			nseg = 1
			diam = D
			L = paraL2
			// cytoplasmic resistivity, corrected for diameter
			Ra = rhoa*(1/(paraD2/D)^2)/10000 // [ohm*cm] (converted from ohm*um)
			// specific membrane capacitance, corrected for diameter
			cm = 2*paraD2/D // [uf/cm^2]
			// mod file declaring flut channel properties
			insert flut_motor

			// extracellular layer, i.e. small layer of 
			// axoplasm and myelin sheath
			// axial resistance
			xraxial = Rpn2
			// conductivity, corrected for number of lamella membranes
			xg = mygm/(nbLam*2)
			// capacitance, corrected for number of lamella membranes
			xc = mycm/(nbLam*2)
		}
	}

	// STIN sections
	for i=0, axoninter-1 {
		STIN[i]{
			nseg = 1
			diam = D
			L = interL
			// cytoplasmic resistivity, corrected for diameter
			Ra = rhoa*(1/(interD/D)^2)/10000 // ohm*cm (converted from ohm*um)
			// specific membrane capacitance, corrected for diameter
			cm = 2*interD/D
			// mod file declaring stin channel properties
			insert stin_motor

			// extracellular layer, i.e. small layer of 
			// axoplasm and myelin sheath
			// axial resistance
			xraxial = Rpx
			// conductivity, corrected for number of lamella membranes
			xg = mygm/(nbLam*2)
			// capacitance, corrected for number of lamella membranes
			xc = mycm/(nbLam*2)
		}
	}

	// Connect all sections to form fiber
	for i=0, nbNod-2 {
		connect MYSA[2*i](0), node[i](1)
		connect FLUT[2*i](0), MYSA[2*i](1)

		connect STIN[6*i](0), FLUT[2*i](1)
		connect STIN[6*i+1](0), STIN[6*i](1)
		connect STIN[6*i+2](0), STIN[6*i+1](1)
		connect STIN[6*i+3](0), STIN[6*i+2](1)
		connect STIN[6*i+4](0), STIN[6*i+3](1)	
		connect STIN[6*i+5](0), STIN[6*i+4](1)	

		connect FLUT[2*i+1](0), STIN[6*i+5](1)
		connect MYSA[2*i+1](0), FLUT[2*i+1](1)
		connect node[i+1](0), MYSA[2*i+1](1)
	}
	// finitialize(v_init)
	// fcurrent()
}

modelsetup()

// specification of the biology representation (model setup) is now complete
// ============================================================================

/* Instrumentation ***********************************************************/

// initialization handler
objref fih
// Set handler
fih = new FInitializeHandler(0, "set_e_ext(0)")
											 
 																	   

//the following procedure gets called once at t=0 by the and then calls itself at the 
// stimulus onset (t=start) and offset (t=start+duration)
// changes extracellular stimulation values at the beginning of of the test and at the beginning and end of the stimulation pulse
proc set_e_ext() {
	// beginning of the test
	// extracellular voltage is zero, wait for t = start to start pulse
	if ($1 == 0) {
		//set extracellular voltage source to ground
		forall e_extracellular = 0
		// when to turn on
		cvode.event(start, "set_e_ext(1)")

	// during the stimulation pulse
	// set extracellular voltage to values determined by MAXWELL
	// wait for the end of the pulse (t = start + duration)

	} else if ($1 == 1) {
		// iterate all fiber sections
		for i=0, nbNod-2{
			// start position of the current section in terms of compartments
			sectStart = i * nComparts
			// set extracellular potentials at compartments
			node[i].e_extracellular = -V.x[sectStart]*mod_factor
			MYSA[2*i].e_extracellular = -V.x[sectStart+1]*mod_factor
			FLUT[2*i].e_extracellular = -V.x[sectStart+2]*mod_factor
			STIN[6*i].e_extracellular = -V.x[sectStart+3]*mod_factor
			STIN[6*i+1].e_extracellular = -V.x[sectStart+4]*mod_factor
			STIN[6*i+2].e_extracellular = -V.x[sectStart+5]*mod_factor
			STIN[6*i+3].e_extracellular = -V.x[sectStart+6]*mod_factor
			STIN[6*i+4].e_extracellular = -V.x[sectStart+7]*mod_factor
			STIN[6*i+5].e_extracellular = -V.x[sectStart+8]*mod_factor
			FLUT[2*i+1].e_extracellular = -V.x[sectStart+9]*mod_factor
			MYSA[2*i+1].e_extracellular = -V.x[sectStart+10]*mod_factor
		}
    
    // Set extracellular potential at last node
    node[nbNod-1].e_extracellular=-V.x[V.size()-1]*mod_factor

	cvode.event(start + duration, "set_e_ext(2)")

	// end of the stimulation pulse
	} else if ($1 == 2) {
		// reset extracellular stimulation to zero
		forall e_extracellular = 0
		// wait for the beginning of a new test
		cvode.event(0, "set_e_ext(0)")
	}
}

// a density mechanism that delivers a constant current to each segment
// forcing the model's resting potential to v_init
// current is specified by range variable parameter ic
// mechanism specified in constant.mod
forall insert constant

proc init() {
  finitialize(v_init)
  // exploit the fact that all sections named foo
  // have the same set of channels
  // for each section of a given type iterate over each segment
  forsec "node" for (x,0) {
    // ina, inap, ik, il, ikf
    ic_constant = -(ina_node_motor + inap_node_motor + ik_node_motor \
                    + il_node_motor + ikf_node_motor)
  }
  forsec "MYSA" for (x,0) {
    // ik, il, iq, ikf
    ic_constant = -(ik_mysa_motor + iq_mysa_motor \
                    + il_mysa_motor + ikf_mysa_motor)
  }
  forsec "FLUT" for (x,0) {
    // ik, il, iq, ikf
    ic_constant = -(ik_flut_motor + iq_flut_motor \
                    + il_flut_motor + ikf_flut_motor)
  }
  forsec "STIN" for (x,0) {
    // ik, il, iq, ikf
    ic_constant = -(ik_stin_motor + iq_stin_motor \
                    + il_stin_motor + ikf_stin_motor)
  }

  if (cvode.active()) {
    cvode.re_init()
  } else {
    fcurrent()
  }
  
  frecord_init()
}


// Function that launches simulation for one mod_factor given as input
func ExecuteSimulation() {

	// Set simulation parameters
	// amplitude modulator as input parameter 1
	mod_factor = $1
	// Set stopping time to 1.4ms
	tstop = 1.4
	// Set integration time interval to 0.001ms
	dt = 0.001

	// Put AP counter on center of nodes in middle and end of fiber with 
	// threshold 0mv (on v, not on extracellular layers)
	// middle node
	node[int(nbNod / 2 + .5) - 1] {
		apcMiddle = new APCount(0.5)
		apcMiddle.thresh = 0
	}
	// end node
	node[nbNod - 1]{
		apcEnd = new APCount(0.5)
		apcEnd.thresh = 0
	}
	access node[nbNod - 1] // TODO: try without this

	// Performs initialization in several steps:
	// - sets t = 0
	// - initialize all sections membrane potential with v_init (node/paranode)
	// - calls FInitializeHandlers: here we have only fih which points on the 
	//   procedure initi() 
	// - executes all INITIAL blocks of the sections mechanisms	(.mod)
	finitialize(v_init)
	
	// Start simulation (t starts to go)
	// When t = start, set_e_ext() is called for the first time and since calls are
	// launched within the function, the simulation will follow its instructions
	// until t = tstop ;)
	run()

	// If threshold crossed (AP generated) on both nodes (middle and end), return 
	// mod_factor+1 (because apcMiddle.n gives number of times crossed threshold)
	// return mod_factor+0 otherwise
	if (apcMiddle.n>0 && apcEnd.n>0){
		return 1
	} else{
		return 0
	}
}

/* Main ***********************************************************************/

// Launch simulations until fiber is activated
proc FindThreshold(){ local i_stim
	// estimated threshold
	i_stim = $1
	// simulate with estimated threshold
	activation = ExecuteSimulation(i_stim * deltaI)
	// if the fiber was active for the estimated threshold ...
	if (activation) {
		minActive = i_stim
		maxInactive = 0
		// ... try the lower potentials via bisection
		while (minActive - maxInactive > 1) {
			i_stim = int((minActive + maxInactive) / 2)
			activation = ExecuteSimulation(i_stim * deltaI)
			if(activation) {
				minActive = i_stim
			} else {
				maxInactive = i_stim
			}
		}
	// if the fiber was inactive for the estimated threshold ...
	} else {
		minActive = 0
		// ... increase the potentials until the threshold is met
		while (!activation && i_stim < nbCurr) {
			i_stim += 1
			activation = ExecuteSimulation(i_stim * deltaI)
			if (activation) {
				minActive = i_stim
			}
		}
	}

	// print threshold, preceded by string specified in second input argument
	print $s2, ": ", minActive % (nbCurr + 1)
}